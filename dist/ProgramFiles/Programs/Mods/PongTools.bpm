import "Color"
import "AdvMtCtrls"

Function setUp()
  Motor.Invert("B")
EndFunction

Function smoothDrive(in number kP, in number minPower,in number maxPower, in number totalDist, in string straight, in string isBreak)
  If totalDist*0.5 >= 300 Then
    accDist = 300
    decDist = 300
  Else
    decDist = totalDist*0.6
    accDist = totalDist-decDist
  EndIf
  AdvMtCtrls.AccTwoEnc_Config(minPower, maxPower, accDist, decDist, totalDist)
  AdvMtCtrls.Sync_Config(kP, 50, 50)
  Motor.ResetCount("BC")
  mp = 1
  If straight = "False" Then
    mp = -1
  EndIf
  done = 0
  While done = 0
    enc1 = Motor.GetCount("B")
    enc2 = Motor.GetCount("C")
    AdvMtCtrls.AccTwoEnc(enc1, enc2, pOut, isDone)
    AdvMtCtrls.Sync_pwrIn(enc1, enc2, kP, pOut*mp, pOut, p1Out, p2Out)
    Motor.StartPower("B", p1Out)
    Motor.StartPower("C", p2Out)
    done = isDone
  EndWhile
  Motor.Stop("BC", isBreak)
EndFunction

Function smoothPort(in string port, in number minPower,in number maxPower,in number accDist,in number decDist,in number totalDist)
  AdvMtCtrls.AccOneEnc_Config(minPower, maxPower, accDist, decDist, totalDist)
  Motor.ResetCount(port)
  done = 0
  While done = 0
    enc = Motor.GetCount(port)
    AdvMtCtrls.AccOneEnc(enc, pOut, isDone)
    Motor.StartPower(port, pOut)
    done = isDone
  EndWhile
  Motor.Stop(port, "True")
EndFunction

Function syncMove(in number kP, in number leftPower, in number rightPower, in number totalDist, in string isBreak)
  AdvMtCtrls.Sync_Config(kp, leftPower, rightPower)
  Motor.ResetCount("BC")
  dist = 0
  While dist < totalDist
    enc1 = Motor.GetCount("B")
    enc2 = Motor.GetCount("C")
    AdvMtCtrls.Sync(enc1, enc2, p1Out, p2Out)
    Motor.StartPower("B", p1Out)
    Motor.StartPower("C", p2Out)
    dist = (Math.Abs(Motor.GetCount("B")) + Math.Abs(Motor.GetCount("C")))/2
  EndWhile
  Motor.Stop("BC", isBreak)
EndFunction

Function syncMoveSee(in number kP, in number port, in number power, in number blackValue, in string isBreak)
  AdvMtCtrls.Sync_Config(kp, power, power)
  Motor.ResetCount("BC")
  done = 0
  While done = 0
    enc1 = Motor.GetCount("B")
    enc2 = Motor.GetCount("C")
    AdvMtCtrls.Sync(enc1, enc2, p1Out, p2Out)
    Motor.StartPower("B", p1Out)
    Motor.StartPower("C", p2Out)
    Color.getLight(port, lightOut)
    If lightOut <= blackValue Then
      done = 1
    EndIf
    Program.Delay(10)
  EndWhile
  Motor.Stop("BC", isBreak)
EndFunction

Function spinSee(in number kP, in number power, in number blackValue, in string isBreak)
  AdvMtCtrls.Sync_Config(kp, power, power*-1)
  Motor.ResetCount("BC")
  Program.Delay(100)
  port = 2
  if power < 0 Then
    port = 1
  EndIf
  done = 0
  While done = 0
    enc1 = Motor.GetCount("B")
    enc2 = Motor.GetCount("C")
    AdvMtCtrls.Sync(enc1, enc2, p1Out, p2Out)
    Motor.StartPower("B", p1Out)
    Motor.StartPower("C", p2Out)
    Color.getLight(port, lightOut)
    If lightOut <= blackValue Then
      done = 1
    EndIf
    Program.Delay(10)
  EndWhile
  While done = 1
    enc1 = Motor.GetCount("B")
    enc2 = Motor.GetCount("C")
    AdvMtCtrls.Sync(enc1, enc2, p1Out, p2Out)
    Motor.StartPower("B", p1Out)
    Motor.StartPower("C", p2Out)
    Color.getLight(port, lightOut)
    If lightOut > blackValue Then
      done = 0
    EndIf
    Program.Delay(10)
  EndWhile
  Motor.Stop("BC", isBreak)
EndFunction

Function lineTrack(in number kP, in number kD, in number power, in number totalDist, in string isBreak)
  AdvMtCtrls.PD_Config(kP, kD, power)
  dist = 0
  Motor.ResetCount("BC")
  While dist < totalDist
    Color.getLight(1, light1)
    Color.getLight(2, light2)
    AdvMtCtrls.PD(light1, light2, p1Out, p2Out)
    Motor.StartPower("B", p1Out)
    Motor.StartPower("C", p2Out)
    dist = (Math.Abs(Motor.GetCount("B")) + Math.Abs(Motor.GetCount("C")))/2
    Program.Delay(10)
  EndWhile
  Motor.Stop("BC", isBreak)
EndFunction

Function smoothLineTrack(in number kP, in number kD, in number minPower, in number maxPower, in number totalDist)
  If totalDist*0.5 >= 300 Then
    accDist = 300
    decDist = 300
  Else
    accDist = totalDist*0.5
    decDist = totalDist-accDist
  EndIf
  AdvMtCtrls.AccTwoEnc_Config(minPower, maxPower, accDist, decDist, totalDist)
  AdvMtCtrls.PD_Config(kP, kD, maxPower)
  done = 0
  Motor.ResetCount("BC")
  While done = 0
    Color.getLight(1, light1)
    Color.getLight(2, light2)
    enc1 = Motor.GetCount("B")
    enc2 = Motor.GetCount("C")
    AdvMtCtrls.AccTwoEnc(enc1, enc2, pOut, isDone)
    AdvMtCtrls.PD_pwrIn(pOut, light1, light2, p1Out, p2Out)
    Motor.StartPower("B", p1Out)
    Motor.StartPower("C", p2Out)
    done = isDone
    Program.Delay(10)
  EndWhile
  Motor.Stop("BC", "True")
EndFunction

Function moveUntilStall(in number power)
  Motor.ResetCount("BC")
  stall = 0
  While stall = 0
    enc1 = Motor.GetCount("B")
    enc3 = Motor.GetCount("C")
    Motor.StartPower("B", power)
    Motor.StartPower("C", power)
    Program.Delay(100)
    enc2 = Motor.GetCount("B")
    enc4 = Motor.GetCount("C")
    If enc1 - enc2 = 0 And enc3 - enc4 = 0 Then
      stall = 1
    EndIf
  EndWhile
  Motor.Stop("BC", "True")
EndFunction

Function runUntilStall(in string port, in number power)
  Motor.ResetCount(port)
  stall = 0
  While stall = 0
    enc1 = Motor.GetCount(port)
    Motor.StartPower(port, power)
    Program.Delay(100)
    enc2 = Motor.GetCount(port)
    If enc1 - enc2 = 0 Then
      stall = 1
    EndIf
  EndWhile
  Motor.Stop(port, "True")
EndFunction

Function motorCtrl(in string port, in number power, in number degree)
  Motor.ResetCount(port)
  done = 0
  While done = 0
    Motor.StartPower(port, power)
    enc = Math.Abs(Motor.GetCount(port))
    If enc >= degree Then
      done = 1
    EndIf
  EndWhile
  Motor.Stop(port, "True")
EndFunction

Function checkColor(in number port, out string colorOut)
  color = ""
  Color.getRGBW(port, redOut, greenOut, blueOut, whiteOut)
  if redOut > greenOut and redOut > blueOut Then
    Color.getRGBW(port, redOut, greenOut, blueOut, whiteOut)
    raw = (((greenOut-blueOut)/blueOut)*200)-redOut
    if raw > 45 Then
      if greenOut >= 16 Then
        color = "Yellow"
      Else
        color = "Red"
      EndIf
    Else
      color = "Red"
    EndIf
  Else
    Color.getRGBW(port, redOut, greenOut, blueOut, whiteOut)
    if greenOut > redOut and greenOut > blueOut Then
      color = "Green"
    Else
      Color.getRGBW(port, redOut, greenOut, blueOut, whiteOut)
      if blueOut > redOut and greenOut > redOut Then
        color = "Blue"
      Else
        color = "Yellow"
      EndIf
    EndIf
  EndIf
  colorOut = color
EndFunction